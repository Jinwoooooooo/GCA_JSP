/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.34
 * Generated at: 2025-02-04 01:36:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class _1_request_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>1.request</title>\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("	날짜 : 2025/02/04\r\n");
      out.write("	이름 : 정진우\r\n");
      out.write("	내용 : JSP 내장객체 request 실습하기\r\n");
      out.write("\r\n");
      out.write("	request 내장객체\r\n");
      out.write("	- 클라이언트의 요청 정보를 갖는 객체\r\n");
      out.write("	- 클라이언트의 전송 데이터를 수신처리하기 위한 기능 제공(getParameter)\r\n");
      out.write("	\r\n");
      out.write("	GET 전송방식\r\n");
      out.write("	- GET은 기본 데이터 전송방식, 전송 데이터를 주소(URL)에 붙어 서버로 전송\r\n");
      out.write("	- GET은 전송 데이터가 노출되기 때문에 보안에 취약하지만 POST 전송보다 빠름\r\n");
      out.write("	\r\n");
      out.write("	POST 전송방식\r\n");
      out.write("	- 전송 데이터를 request 요청 객체 body에 저장해서 전송하는 방식\r\n");
      out.write("	- 전송 데이터가 주소에 노출되지 않기 때문에 보안에 유리하고 대량의 데이터 전송에 적합\r\n");
      out.write(" -->\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h3>1.request 내장객체</h3>\r\n");
      out.write("	\r\n");
      out.write("	<h4>GET방식 데이터 전송</h4>\r\n");
      out.write("	<form action=\"./proc/result1.jsp\" method=\"get\">\r\n");
      out.write("		<input type=\"text\" name=\"uid\" placeholder=\"아이디 입력\"><br>\r\n");
      out.write("		<input type=\"text\" name=\"name\" placeholder=\"이름 입력\"><br>\r\n");
      out.write("		<input type=\"number\" name=\"age\" placeholder=\"나이 입력\"><br>\r\n");
      out.write("		<input type=\"submit\" value=\"전송하기\"><br>\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("	<h4>POST방식 데이터 전송</h4>\r\n");
      out.write("	<form action=\"./proc/result1.jsp\" method=\"post\">\r\n");
      out.write("		<input type=\"text\" name=\"uid\" placeholder=\"아이디 입력\"><br>\r\n");
      out.write("		<input type=\"text\" name=\"name\" placeholder=\"이름 입력\"><br>\r\n");
      out.write("		<input type=\"number\" name=\"age\" placeholder=\"나이 입력\"><br>\r\n");
      out.write("		<input type=\"submit\" value=\"전송하기\"><br>\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("	<h4>확인문제</h4>\r\n");
      out.write("	<form action=\"./proc/result2.jsp\" method=\"post\">\r\n");
      out.write("		<table border=\"1\">\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>아이디</td>\r\n");
      out.write("				<td><input type=\"text\" name=\"uid\" placeholder=\"아이디 입력\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>비밀번호</td>\r\n");
      out.write("				<td><input type=\"password\" name=\"pass\" placeholder=\"비밀번호 입력\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>이름</td>\r\n");
      out.write("				<td><input type=\"text\" name=\"name\" placeholder=\"이름 입력\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>생년월일</td>\r\n");
      out.write("				<td><input type=\"date\" name=\"birth\" placeholder=\"날짜 선택\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>성별</td>\r\n");
      out.write("				<td>\r\n");
      out.write("					<label><input type=\"radio\" name=\"gender\" value=\"M\">남</label>\r\n");
      out.write("					<label><input type=\"radio\" name=\"gender\" value=\"F\">여</label>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>주소</td>\r\n");
      out.write("				<td>\r\n");
      out.write("					<select name=\"addr\">\r\n");
      out.write("						<option>서울</option>\r\n");
      out.write("						<option>대구</option>\r\n");
      out.write("						<option>대전</option>\r\n");
      out.write("						<option>부산</option>\r\n");
      out.write("						<option>광주</option>\r\n");
      out.write("					</select>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>취미</td>\r\n");
      out.write("				<td>\r\n");
      out.write("					<label><input type=\"checkbox\" name=\"hobby\" value=\"등산\">등산</label>\r\n");
      out.write("					<label><input type=\"checkbox\" name=\"hobby\" value=\"독서\">독서</label>\r\n");
      out.write("					<label><input type=\"checkbox\" name=\"hobby\" value=\"영화\">영화</label>\r\n");
      out.write("					<label><input type=\"checkbox\" name=\"hobby\" value=\"운동\">운동</label>\r\n");
      out.write("					<label><input type=\"checkbox\" name=\"hobby\" value=\"게임\">게임</label>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td colspan=\"2\" align=\"right\">\r\n");
      out.write("					<input type=\"submit\" value=\"전송하기\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("	<h4>request 기타정보</h4>\r\n");
      out.write("	<p>\r\n");
      out.write("		헤더정보#1 : ");
      out.print( request.getHeader("User-Agent") );
      out.write("<br>\r\n");
      out.write("		헤더정보#2 : ");
      out.print( request.getHeader("referer") );
      out.write("<br>\r\n");
      out.write("		헤더정보#3 : ");
      out.print( request.getHeader("cookie") );
      out.write("<br>\r\n");
      out.write("		프로토콜 : ");
      out.print( request.getProtocol() );
      out.write("<br>\r\n");
      out.write("		서버이름 : ");
      out.print( request.getServerName() );
      out.write("<br>\r\n");
      out.write("		요청주소 : ");
      out.print( request.getRequestURL() );
      out.write("<br>\r\n");
      out.write("		요청경로 : ");
      out.print( request.getRequestURI() );
      out.write("<br>\r\n");
      out.write("		IP주소 : ");
      out.print( request.getRemoteAddr() );
      out.write("<br>\r\n");
      out.write("	</p>\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
